<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[John Beieler]]></title>
  <link href="http://johnb30.github.com/atom.xml" rel="self"/>
  <link href="http://johnb30.github.com/"/>
  <updated>2013-04-12T14:58:04-04:00</updated>
  <id>http://johnb30.github.com/</id>
  <author>
    <name><![CDATA[John Beieler]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GDELT, Big Data, and Theory]]></title>
    <link href="http://johnb30.github.com/blog/2013/04/12/gdelt/"/>
    <updated>2013-04-12T14:56:00-04:00</updated>
    <id>http://johnb30.github.com/blog/2013/04/12/gdelt</id>
    <content type="html"><![CDATA[<p>I made the remark on Twitter that it seemed like GDELT week due to a
<a href="http://ideas.foreignpolicy.com/posts/2013/04/10%20what_can_we_learn_from_the_last_200_million_things_that_happened_in_the_world">Foreign Policy</a>
piece about the dataset, Phil and Kalev&#8217;s <a href="http://eventdata.psu.edu/papers.dir/ISA.2013.GDELT.pdf">paper</a>
for the ISA 2013 meeting, and a <a href="https://dartthrowingchimp.wordpress.com/2013/04/10/the-future-of-political-science-just-showed-up/">host</a>
of <a href="http://badhessian.org/gdelt-and-social-movements/">blog</a>
<a href="https://willopines.wordpress.com/2013/04/11/excitement-about-gdelt-and-some-personal-intellectual-history/">posts</a>
about the data. So, in the spirit of GDELT week, I thought I would throw my hat into
the ring. But instead of taking the approach of lauding the new age that is approaching
for political and social research due to the monstrous scale of the data now available, I thought
I would write a little about the issues that come along with dealing with such massive data.</p>

<h3>Dealing with GDELT</h3>

<p>As someone who has spent the better part of the past 8 months dealing with the GDELT dataset,
including <a href="http://johnbeieler.org/blog/2013/04/04/how-do-i-gdelt-subsetting-and-aggregating-the-gdelt-dataset/">writing</a> a little about
working with the data, I feel that I have a somewhat unique perspective. The long and the
short of my experience is: working with data on this scale is hard. This may strike some
as obvious, especially given the cottage industry that has sprung up around Hadoop and
and other services for processing data. GDELT is 200+ million events spread across several
years. Each year of the <a href="http://eventdata.psu.edu/data.dir/GDELT.html">reduced data</a> is in
a separate file and contains information about many, many different actors. This is part of
what makes the data so intriguing and useful, but the data is also unlike data such as the
ever-popular <a href="http://www.correlatesofwar.org/COW2%20Data/MIDs/MID310.html">MID data</a> in
political science that is easily managed in a program like Stata or <code>R</code>. The data requires
subsetting, massaging, and aggregating; having so much data can, at some points, become
overwhelming. What states do I want to look at? What type of actors? What type of actions?
What about substate actors? Oh, what about the dyadic interactions? These questions and
more quickly come to the fore when dealing with data on this scale. So while the GDELT
data offers an avenue to answer some existing questions, it also brings with it many
potential problems.</p>

<h3>Careful Research</h3>

<p>So, that all sounds kind of depressing. We have this new, cool dataset that could
be tremendously useful, but it also presents many hurdles. What, then, should we
as social science researchers do about it? My answer is careful theorizing and
thinking about the processes under examination. This might be a &#8220;well, duh&#8221;
moment to those in the social sciences, but I think it is worth saying when
there are some heralding <a href="http://www.wired.com/science/discoveries/magazine/16-07/pb_theory">&#8220;The End of Theory&#8221;</a>.
This type of large-scale data does not reduce theory and the scientific
method to irrelevance. Instead, theory is elevated to a position of
higher importance. What states do I want to look at? What type of
actions? Well, what does the theory say? As Hilary Mason noted in
a <a href="https://twitter.com/hmason/status/294930646122504192">tweet</a>:</p>

<blockquote><p>Data tells you whether to use A or B. Science tells you what A and B should be in the first place.</p></blockquote>

<p>Put into more social-scientific language, data tells us the relationship
between A and B, while science tells us what A and B should be and what type
of observations should be used. The data under examination in a given study
should be driven by careful consideration of the processes of interest.
This idea should not, however, be construed as a rejection of &#8220;big data&#8221; in the
social sciences. I personally believe the exact opposite; give me as many features,
measures, and observations as possible and let algorithms sort out what is important.
Instead, I think the social sciences, and science in general, is about asking
interesting questions of the data that will often require more finesse than taking an
&#8220;ANALYZE ALL THE DATA&#8221; approach. Thus, while datasets like GDELT provide new opportunities,
they are not opportunities to relax and let the data do the talking. If anything, big data
generating processes will require more work on the part of the researcher than previous
data sources.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Do I GDELT?: Subsetting and Aggregating the GDELT Dataset]]></title>
    <link href="http://johnb30.github.com/blog/2013/04/04/how-do-i-gdelt-subsetting-and-aggregating-the-gdelt-dataset/"/>
    <updated>2013-04-04T19:15:00-04:00</updated>
    <id>http://johnb30.github.com/blog/2013/04/04/how-do-i-gdelt-subsetting-and-aggregating-the-gdelt-dataset</id>
    <content type="html"><![CDATA[<h3>GDELT</h3>

<p>Over the past week, the Global Data on Events, Location and Tone (GDELT)
dataset was finally released to the general public. The data is available
at the Penn State event data <a href="http://eventdata.psu.edu/data.dir/GDELT.html">website</a>.
We at Penn State had the
good fortune to have access to this dataset for many months before its public
release. This allowed us to gain some experience working with this massive
collection of data. As a brief background, GDELT is comprised of event
data records spanning 1979 - mid 2012. The events are coded according to the
<a href="http://eventdata.psu.edu/data.dir/cameo.html">CAMEO</a> coding scheme, with the
addition of a &#8220;QuadCategory,&#8221; which separates the events into the material conflict,
material cooperation, verbal conflict, and verbal conflict categories. The data is
spread across 33 different files, each of which is substantially large on its own.
This makes it fairly difficult to work with, and almost guarantees that some
subset of the data is necessary in order to perform analysis. Phil Schrodt has
included some programs with the data to aid in this subsetting, but I thought there
might be some who would prefer to get their hands dirty and write some of their
own code. Given this, I thought I would share some of the knowledge I gained
while working with the GDELT dataset.</p>

<p>For the purposes of this brief introduction, I will work under the assumption
that the desired events are those that originate from the United States, are
directed at some type of state actor, and are either verbal cooperation or
conflict. The following code, written in Python, demonstrates how this subset
might be selected from the GDELT data. The code also assumes the reader
has the <code>pandas</code> and <code>path</code> Python modules installed. Both can be installed using
the normal <code>pip install</code> method. Finally, the complete code is available as
a gist on <a href="https://gist.github.com/johnb30/5316196">github</a>.</p>

<p>Before starting, it is always useful to take a peek at the data. This is as
simple as opening up the terminal and using <code>head 1979.reduced.txt</code>. Doing this
shows the various columns in the reduced data and how they are arranged. We
can see that the date is in the 0 index, with <code>Actor1Code</code> and <code>Actor2Code</code>
in spots 1 and 2, respectively. Additionally, <code>EventCode</code> is located in spot 3,
while the <code>QuadCategory</code> variable is, fittingly, in position 4. These indices
will prove crucial when it comes time to split and subset the data.</p>

<h3>Code</h3>

<p>from path import path
import pandas as pd</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">allActors</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;AFG&#39;</span><span class="p">,</span> <span class="s">&#39;ALA&#39;</span><span class="p">,</span> <span class="s">&#39;ALB&#39;</span><span class="p">,</span> <span class="s">&#39;DZA&#39;</span><span class="p">,</span> <span class="s">&#39;ASM&#39;</span><span class="p">,</span> <span class="s">&#39;AND&#39;</span><span class="p">,</span> <span class="s">&#39;AGO&#39;</span><span class="p">,</span> <span class="s">&#39;AIA&#39;</span><span class="p">,</span> <span class="s">&#39;ATG&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;ARG&#39;</span><span class="p">,</span> <span class="s">&#39;ARM&#39;</span><span class="p">,</span> <span class="s">&#39;ABW&#39;</span><span class="p">,</span> <span class="s">&#39;AUS&#39;</span><span class="p">,</span> <span class="s">&#39;AUT&#39;</span><span class="p">,</span> <span class="s">&#39;AZE&#39;</span><span class="p">,</span> <span class="s">&#39;BHS&#39;</span><span class="p">,</span> <span class="s">&#39;BHR&#39;</span><span class="p">,</span> <span class="s">&#39;BGD&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;BRB&#39;</span><span class="p">,</span> <span class="s">&#39;BLR&#39;</span><span class="p">,</span> <span class="s">&#39;BEL&#39;</span><span class="p">,</span> <span class="s">&#39;BLZ&#39;</span><span class="p">,</span> <span class="s">&#39;BEN&#39;</span><span class="p">,</span> <span class="s">&#39;BMU&#39;</span><span class="p">,</span> <span class="s">&#39;BTN&#39;</span><span class="p">,</span> <span class="s">&#39;BOL&#39;</span><span class="p">,</span> <span class="s">&#39;BIH&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;BWA&#39;</span><span class="p">,</span> <span class="s">&#39;BRA&#39;</span><span class="p">,</span> <span class="s">&#39;VGB&#39;</span><span class="p">,</span> <span class="s">&#39;BRN&#39;</span><span class="p">,</span> <span class="s">&#39;BGR&#39;</span><span class="p">,</span> <span class="s">&#39;BFA&#39;</span><span class="p">,</span> <span class="s">&#39;BDI&#39;</span><span class="p">,</span> <span class="s">&#39;KHM&#39;</span><span class="p">,</span> <span class="s">&#39;CMR&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;CAN&#39;</span><span class="p">,</span> <span class="s">&#39;CPV&#39;</span><span class="p">,</span> <span class="s">&#39;CYM&#39;</span><span class="p">,</span> <span class="s">&#39;CAF&#39;</span><span class="p">,</span> <span class="s">&#39;TCD&#39;</span><span class="p">,</span> <span class="s">&#39;CHL&#39;</span><span class="p">,</span> <span class="s">&#39;CHN&#39;</span><span class="p">,</span> <span class="s">&#39;COL&#39;</span><span class="p">,</span> <span class="s">&#39;COM&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;COD&#39;</span><span class="p">,</span> <span class="s">&#39;COG&#39;</span><span class="p">,</span> <span class="s">&#39;COK&#39;</span><span class="p">,</span> <span class="s">&#39;CRI&#39;</span><span class="p">,</span> <span class="s">&#39;CIV&#39;</span><span class="p">,</span> <span class="s">&#39;HRV&#39;</span><span class="p">,</span> <span class="s">&#39;CUB&#39;</span><span class="p">,</span> <span class="s">&#39;CYP&#39;</span><span class="p">,</span> <span class="s">&#39;CZE&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;DNK&#39;</span><span class="p">,</span> <span class="s">&#39;DJI&#39;</span><span class="p">,</span> <span class="s">&#39;DMA&#39;</span><span class="p">,</span> <span class="s">&#39;DOM&#39;</span><span class="p">,</span> <span class="s">&#39;TMP&#39;</span><span class="p">,</span> <span class="s">&#39;ECU&#39;</span><span class="p">,</span> <span class="s">&#39;EGY&#39;</span><span class="p">,</span> <span class="s">&#39;SLV&#39;</span><span class="p">,</span> <span class="s">&#39;GNQ&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;ERI&#39;</span><span class="p">,</span> <span class="s">&#39;EST&#39;</span><span class="p">,</span> <span class="s">&#39;ETH&#39;</span><span class="p">,</span> <span class="s">&#39;FRO&#39;</span><span class="p">,</span> <span class="s">&#39;FLK&#39;</span><span class="p">,</span> <span class="s">&#39;FJI&#39;</span><span class="p">,</span> <span class="s">&#39;FIN&#39;</span><span class="p">,</span> <span class="s">&#39;FRA&#39;</span><span class="p">,</span> <span class="s">&#39;GUF&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;PYF&#39;</span><span class="p">,</span> <span class="s">&#39;GAB&#39;</span><span class="p">,</span> <span class="s">&#39;GMB&#39;</span><span class="p">,</span> <span class="s">&#39;GEO&#39;</span><span class="p">,</span> <span class="s">&#39;DEU&#39;</span><span class="p">,</span> <span class="s">&#39;GHA&#39;</span><span class="p">,</span> <span class="s">&#39;GIB&#39;</span><span class="p">,</span> <span class="s">&#39;GRC&#39;</span><span class="p">,</span> <span class="s">&#39;GRL&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;GRD&#39;</span><span class="p">,</span> <span class="s">&#39;GLP&#39;</span><span class="p">,</span> <span class="s">&#39;GUM&#39;</span><span class="p">,</span> <span class="s">&#39;GTM&#39;</span><span class="p">,</span> <span class="s">&#39;GIN&#39;</span><span class="p">,</span> <span class="s">&#39;GNB&#39;</span><span class="p">,</span> <span class="s">&#39;GUY&#39;</span><span class="p">,</span> <span class="s">&#39;HTI&#39;</span><span class="p">,</span> <span class="s">&#39;VAT&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;HND&#39;</span><span class="p">,</span> <span class="s">&#39;HKG&#39;</span><span class="p">,</span> <span class="s">&#39;HUN&#39;</span><span class="p">,</span> <span class="s">&#39;ISL&#39;</span><span class="p">,</span> <span class="s">&#39;IND&#39;</span><span class="p">,</span> <span class="s">&#39;IDN&#39;</span><span class="p">,</span> <span class="s">&#39;IRN&#39;</span><span class="p">,</span> <span class="s">&#39;IRQ&#39;</span><span class="p">,</span> <span class="s">&#39;IRL&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;IMY&#39;</span><span class="p">,</span> <span class="s">&#39;ISR&#39;</span><span class="p">,</span> <span class="s">&#39;ITA&#39;</span><span class="p">,</span> <span class="s">&#39;JAM&#39;</span><span class="p">,</span> <span class="s">&#39;JPN&#39;</span><span class="p">,</span> <span class="s">&#39;JOR&#39;</span><span class="p">,</span> <span class="s">&#39;KAZ&#39;</span><span class="p">,</span> <span class="s">&#39;KEN&#39;</span><span class="p">,</span> <span class="s">&#39;KIR&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;PRK&#39;</span><span class="p">,</span> <span class="s">&#39;KOR&#39;</span><span class="p">,</span> <span class="s">&#39;KWT&#39;</span><span class="p">,</span> <span class="s">&#39;KGZ&#39;</span><span class="p">,</span> <span class="s">&#39;LAO&#39;</span><span class="p">,</span> <span class="s">&#39;LVA&#39;</span><span class="p">,</span> <span class="s">&#39;LBN&#39;</span><span class="p">,</span> <span class="s">&#39;LSO&#39;</span><span class="p">,</span> <span class="s">&#39;LBR&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;LBY&#39;</span><span class="p">,</span> <span class="s">&#39;LIE&#39;</span><span class="p">,</span> <span class="s">&#39;LTU&#39;</span><span class="p">,</span> <span class="s">&#39;LUX&#39;</span><span class="p">,</span> <span class="s">&#39;MAC&#39;</span><span class="p">,</span> <span class="s">&#39;MKD&#39;</span><span class="p">,</span> <span class="s">&#39;MDG&#39;</span><span class="p">,</span> <span class="s">&#39;MWI&#39;</span><span class="p">,</span> <span class="s">&#39;MYS&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;MDV&#39;</span><span class="p">,</span> <span class="s">&#39;MLI&#39;</span><span class="p">,</span> <span class="s">&#39;MLT&#39;</span><span class="p">,</span> <span class="s">&#39;MHL&#39;</span><span class="p">,</span> <span class="s">&#39;MTQ&#39;</span><span class="p">,</span> <span class="s">&#39;MRT&#39;</span><span class="p">,</span> <span class="s">&#39;MUS&#39;</span><span class="p">,</span> <span class="s">&#39;MYT&#39;</span><span class="p">,</span> <span class="s">&#39;MEX&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;FSM&#39;</span><span class="p">,</span> <span class="s">&#39;MDA&#39;</span><span class="p">,</span> <span class="s">&#39;MCO&#39;</span><span class="p">,</span> <span class="s">&#39;MNG&#39;</span><span class="p">,</span> <span class="s">&#39;MTN&#39;</span><span class="p">,</span> <span class="s">&#39;MSR&#39;</span><span class="p">,</span> <span class="s">&#39;MAR&#39;</span><span class="p">,</span> <span class="s">&#39;MOZ&#39;</span><span class="p">,</span> <span class="s">&#39;MMR&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;NAM&#39;</span><span class="p">,</span> <span class="s">&#39;NRU&#39;</span><span class="p">,</span> <span class="s">&#39;NPL&#39;</span><span class="p">,</span> <span class="s">&#39;NLD&#39;</span><span class="p">,</span> <span class="s">&#39;ANT&#39;</span><span class="p">,</span> <span class="s">&#39;NCL&#39;</span><span class="p">,</span> <span class="s">&#39;NZL&#39;</span><span class="p">,</span> <span class="s">&#39;NIC&#39;</span><span class="p">,</span> <span class="s">&#39;NER&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;NGA&#39;</span><span class="p">,</span> <span class="s">&#39;NIU&#39;</span><span class="p">,</span> <span class="s">&#39;NFK&#39;</span><span class="p">,</span> <span class="s">&#39;MNP&#39;</span><span class="p">,</span> <span class="s">&#39;NOR&#39;</span><span class="p">,</span> <span class="s">&#39;PSE&#39;</span><span class="p">,</span> <span class="s">&#39;OMN&#39;</span><span class="p">,</span> <span class="s">&#39;PAK&#39;</span><span class="p">,</span> <span class="s">&#39;PLW&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;PAN&#39;</span><span class="p">,</span> <span class="s">&#39;PNG&#39;</span><span class="p">,</span> <span class="s">&#39;PRY&#39;</span><span class="p">,</span> <span class="s">&#39;PER&#39;</span><span class="p">,</span> <span class="s">&#39;PHL&#39;</span><span class="p">,</span> <span class="s">&#39;PCN&#39;</span><span class="p">,</span> <span class="s">&#39;POL&#39;</span><span class="p">,</span> <span class="s">&#39;PRT&#39;</span><span class="p">,</span> <span class="s">&#39;PRI&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;QAT&#39;</span><span class="p">,</span> <span class="s">&#39;REU&#39;</span><span class="p">,</span> <span class="s">&#39;ROM&#39;</span><span class="p">,</span> <span class="s">&#39;RUS&#39;</span><span class="p">,</span> <span class="s">&#39;RWA&#39;</span><span class="p">,</span> <span class="s">&#39;SHN&#39;</span><span class="p">,</span> <span class="s">&#39;KNA&#39;</span><span class="p">,</span> <span class="s">&#39;LCA&#39;</span><span class="p">,</span> <span class="s">&#39;SPM&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;VCT&#39;</span><span class="p">,</span> <span class="s">&#39;WSM&#39;</span><span class="p">,</span> <span class="s">&#39;SMR&#39;</span><span class="p">,</span> <span class="s">&#39;STP&#39;</span><span class="p">,</span> <span class="s">&#39;SAU&#39;</span><span class="p">,</span> <span class="s">&#39;SEN&#39;</span><span class="p">,</span> <span class="s">&#39;SRB&#39;</span><span class="p">,</span> <span class="s">&#39;SYC&#39;</span><span class="p">,</span> <span class="s">&#39;SLE&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;SGP&#39;</span><span class="p">,</span> <span class="s">&#39;SVK&#39;</span><span class="p">,</span> <span class="s">&#39;SVN&#39;</span><span class="p">,</span> <span class="s">&#39;SLB&#39;</span><span class="p">,</span> <span class="s">&#39;SOM&#39;</span><span class="p">,</span> <span class="s">&#39;ZAF&#39;</span><span class="p">,</span> <span class="s">&#39;ESP&#39;</span><span class="p">,</span> <span class="s">&#39;LKA&#39;</span><span class="p">,</span> <span class="s">&#39;SDN&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;SUR&#39;</span><span class="p">,</span> <span class="s">&#39;SJM&#39;</span><span class="p">,</span> <span class="s">&#39;SWZ&#39;</span><span class="p">,</span> <span class="s">&#39;SWE&#39;</span><span class="p">,</span> <span class="s">&#39;CHE&#39;</span><span class="p">,</span> <span class="s">&#39;SYR&#39;</span><span class="p">,</span> <span class="s">&#39;TJK&#39;</span><span class="p">,</span> <span class="s">&#39;TZA&#39;</span><span class="p">,</span> <span class="s">&#39;THA&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;TGO&#39;</span><span class="p">,</span> <span class="s">&#39;TKL&#39;</span><span class="p">,</span> <span class="s">&#39;TON&#39;</span><span class="p">,</span> <span class="s">&#39;TTO&#39;</span><span class="p">,</span> <span class="s">&#39;TUN&#39;</span><span class="p">,</span> <span class="s">&#39;TUR&#39;</span><span class="p">,</span> <span class="s">&#39;TKM&#39;</span><span class="p">,</span> <span class="s">&#39;TCA&#39;</span><span class="p">,</span> <span class="s">&#39;TUV&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;UGA&#39;</span><span class="p">,</span> <span class="s">&#39;UKR&#39;</span><span class="p">,</span> <span class="s">&#39;ARE&#39;</span><span class="p">,</span> <span class="s">&#39;GBR&#39;</span><span class="p">,</span> <span class="s">&#39;USA&#39;</span><span class="p">,</span> <span class="s">&#39;VIR&#39;</span><span class="p">,</span> <span class="s">&#39;URY&#39;</span><span class="p">,</span> <span class="s">&#39;UZB&#39;</span><span class="p">,</span> <span class="s">&#39;VUT&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;VEN&#39;</span><span class="p">,</span> <span class="s">&#39;VNM&#39;</span><span class="p">,</span> <span class="s">&#39;WLF&#39;</span><span class="p">,</span> <span class="s">&#39;ESH&#39;</span><span class="p">,</span> <span class="s">&#39;YEM&#39;</span><span class="p">,</span> <span class="s">&#39;ZMB&#39;</span><span class="p">,</span> <span class="s">&#39;ZWE&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">quad_codes</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;2&#39;</span><span class="p">,</span> <span class="s">&#39;3&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">filepaths</span> <span class="o">=</span> <span class="n">path</span><span class="o">.</span><span class="n">getcwd</span><span class="p">()</span><span class="o">.</span><span class="n">files</span><span class="p">(</span><span class="s">&#39;*.reduced.txt&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">output</span> <span class="o">=</span> <span class="nb">list</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>This first portion is simply importing the necessary modules, defining the list
of state actors, obtaining the relevant filepaths, and defining an empty list,
which will serve as the container for the subset of the data.
As a brief note, the <code>path</code> module is really fantastic and makes working with
filepaths and directories extremely simple.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">for</span> <span class="n">path</span> <span class="ow">in</span> <span class="n">filepaths</span><span class="p">:</span>
</span><span class='line'>    <span class="n">data</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="s">&#39;r&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;Just read in the </span><span class="si">%s</span><span class="s"> data...&#39;</span> <span class="o">%</span> <span class="n">path</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
</span><span class='line'>        <span class="n">line</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">split_line</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\t</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">condition1</span> <span class="o">=</span> <span class="n">split_line</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">:</span><span class="mi">3</span><span class="p">]</span> <span class="o">==</span> <span class="s">&#39;USA&#39;</span>
</span><span class='line'>        <span class="n">condition2</span> <span class="o">=</span> <span class="n">split_line</span><span class="p">[</span><span class="mi">2</span><span class="p">][</span><span class="mi">0</span><span class="p">:</span><span class="mi">3</span><span class="p">]</span> <span class="o">!=</span> <span class="s">&#39;USA&#39;</span>
</span><span class='line'>        <span class="n">condition3</span> <span class="o">=</span> <span class="n">split_line</span><span class="p">[</span><span class="mi">2</span><span class="p">][</span><span class="mi">0</span><span class="p">:</span><span class="mi">3</span><span class="p">]</span> <span class="ow">in</span> <span class="n">allActors</span>
</span><span class='line'>        <span class="n">condition4</span> <span class="o">=</span> <span class="n">split_line</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="ow">in</span> <span class="n">quad_codes</span>
</span></code></pre></td></tr></table></div></figure>


<p>The next portion of code iterates over the filepaths obtained using <code>path</code>.
Each file is then opened and iterated over line by line. Each line
has any new-line characters replaced, which makes the data easier to work with,
and is then split on the basis of tab characters (&#8216;\t&#8217;). The following four lines
define the logical conditions for subsetting the data. The first condition
indicates that the first three characters of <code>Actor1Code</code> should be
&#8216;USA&#8217;, while <code>condition2</code> states that the first three characters of
<code>Actor2Code</code> should <em>not</em> equal &#8216;USA&#8217;. <code>condition3</code> checks if the first three
characters of <code>Actor2Code</code> are in the <code>allActors</code> list defined earlier, while
<code>condition4</code> checks if the <code>QuadCategory</code> is one of the desired values.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">try</span><span class="p">:</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">all</span><span class="p">([</span><span class="n">condition1</span><span class="p">,</span> <span class="n">condition2</span><span class="p">,</span> <span class="n">condition3</span><span class="p">,</span> <span class="n">condition4</span><span class="p">]):</span>
</span><span class='line'>        <span class="n">output</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">split_line</span><span class="p">)</span>
</span><span class='line'><span class="k">except</span> <span class="ne">IndexError</span><span class="p">:</span>
</span><span class='line'>    <span class="k">pass</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above code simply checks if all of the various conditions were met, and
if so appends the <code>split_line</code> to <code>output</code>. This code is wrapped in a try-except
statement since there can be some malformed lines floating in the data, but this
should not affect the actual event data. The try-except statements allow for
an attempt at a certain block of code, and if an error is raised, in this case
an <code>IndexError</code>, for some other actions to occur.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">header</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">filepaths</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="s">&#39;r&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\t</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">subset</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">output</span><span class="p">,</span> <span class="n">columns</span> <span class="o">=</span> <span class="n">header</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">subset</span><span class="p">[</span><span class="s">&#39;year&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">subset</span><span class="p">[</span><span class="s">&#39;Day&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">4</span><span class="p">]</span>
</span><span class='line'><span class="n">subset</span><span class="p">[</span><span class="s">&#39;month&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">subset</span><span class="p">[</span><span class="s">&#39;Day&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="p">[</span><span class="mi">4</span><span class="p">:</span><span class="mi">6</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">keep_columns</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;year&#39;</span><span class="p">,</span> <span class="s">&#39;month&#39;</span><span class="p">,</span> <span class="s">&#39;Actor1Code&#39;</span><span class="p">,</span> <span class="s">&#39;Actor2Code&#39;</span><span class="p">,</span> <span class="s">&#39;QuadCategory&#39;</span><span class="p">]</span>
</span><span class='line'><span class="n">subset</span> <span class="o">=</span> <span class="n">subset</span><span class="p">[</span><span class="n">keep_columns</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once the code from the previous sections is finished, the subset of the data is
contained in <code>output</code>, which is a list-of-lists with the internal lists representing
the individual events. It is possible, using the <code>pandas</code> library, to convert this
list-of-lists to a pandas DataFrame object, with the header drawn from the first line
of the first file in <code>filepaths</code>. In order to aggregate the data to a specific time period,
it is useful to break out the <code>Day</code> variable into months and years using the <code>.str</code>
functionality of a Series object in <code>pandas</code>. Finally, the last two lines of the above
code reduce the data down to only the columns relevant for this subset.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">subset</span><span class="p">[</span><span class="s">&#39;verbal_coop&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">subset</span><span class="p">[</span><span class="s">&#39;verbal_conf&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="n">subset</span><span class="p">[</span><span class="s">&#39;verbal_coop&#39;</span><span class="p">][</span><span class="n">subset</span><span class="p">[</span><span class="s">&#39;QuadCategory&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s">&#39;2&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="n">subset</span><span class="p">[</span><span class="s">&#39;verbal_conf&#39;</span><span class="p">][</span><span class="n">subset</span><span class="p">[</span><span class="s">&#39;QuadCategory&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s">&#39;3&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="n">subset_grouped</span> <span class="o">=</span> <span class="n">subset</span><span class="o">.</span><span class="n">groupby</span><span class="p">([</span><span class="s">&#39;year&#39;</span><span class="p">,</span> <span class="s">&#39;month&#39;</span><span class="p">,</span> <span class="s">&#39;Actor1Code&#39;</span><span class="p">,</span>
</span><span class='line'><span class="s">&#39;Actor2Code&#39;</span><span class="p">],</span> <span class="n">as_index</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span>
</span><span class='line'><span class="n">subset_aggregated</span> <span class="o">=</span> <span class="n">subset_grouped</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">subset_aggregated</span><span class="o">.</span><span class="n">to_csv</span><span class="p">(</span><span class="s">&#39;gdelt_subset.csv&#39;</span><span class="p">,</span> <span class="n">index</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that the data is in a properly formatted DataFrame, the next step is to create
variables from which to draw counts of the various event types. Two variables,
<code>verbal_coop</code> and <code>verbal_conf</code> are created and assigned values of zero. Then,
these variables are assigned values of one if the <code>QuadCategory</code> matches the
value for that event type. This functionality in <code>pandas</code> is similar that of
<code>R</code>, and I plan on doing a more in-depth tutorial on <code>pandas</code> at a later date.
With the event variables created, the data can be grouped and aggregated. <code>pandas</code>
has the <code>.groupby</code> functionality for DataFrames, which allows you to group the data
by specific variables. For the purposes of this dataset, a multi-level grouping is
desired, with groups created by the year, the month, and the dyad. Once this grouping
is created, the values are summed within each grouping leading to the final, aggregated
dataset. This final data can be saved using the <code>.to_csv</code> method.</p>

<p>And there you have it, you now have a subset of the GDELT dataset.
This is a relatively simple task thanks to Python&#8217;s built in tools. It is
possible to make this task run more quickly using parallel processing, as
outlined in my previous <a href="http://johnbeieler.org/blog/2012/12/07/parallel-data-subsetting/">post</a>
on parallel subsetting. As a brief recap, it is simply
a matter of using the <code>jobilb</code> module, wrapping the above subsetting code in
a function, and adding something along the lines of</p>

<pre><code>data = Parallel(n_jobs=-1)(delayed(subset)(x) for x in list_of_paths)
</code></pre>

<p>to the script. I hope this brief intro will prove helpful to those who wish
to use GDELT in their own research. This tutorial only scratched the surface
of working with event data, and there is much more to consider beyond just
what subset you will select. A good resource on working with event data
was written by <a href="http://jayyonamine.com/wp-content/uploads/2012/06/Working-with-Event-Data-A-Guide-to-Aggregation-Choices.pdf">Jay Yonamine</a>
and will likely prove useful to those engaging in event-data research.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web Scraping Tutorial]]></title>
    <link href="http://johnb30.github.com/blog/2013/02/08/web-scraping-tutorial/"/>
    <updated>2013-02-08T20:39:00-05:00</updated>
    <id>http://johnb30.github.com/blog/2013/02/08/web-scraping-tutorial</id>
    <content type="html"><![CDATA[<p>I had the opportunity to give a short tutorial on web scraping for the Event
Data class here at Penn State. I used an IPython notebook to give the
presentation and I&#8217;ve put the code in a gist. The link to the IPython notebook
is <a href="http://nbviewer.ipython.org/4743272">http://nbviewer.ipython.org/4743272/</a>.</p>

<p>The PITF project I make reference to is hosted on
<a href="https://github.com/johnb30/atrocitiesProject">github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Parallel Data Subsetting]]></title>
    <link href="http://johnb30.github.com/blog/2012/12/07/parallel-data-subsetting/"/>
    <updated>2012-12-07T18:26:00-05:00</updated>
    <id>http://johnb30.github.com/blog/2012/12/07/parallel-data-subsetting</id>
    <content type="html"><![CDATA[<h3>The Challenge</h3>

<p>I&#8217;ve been working with some data that is spread over multiple
tab-delimited files, and is rather large (on the order of 20-30gb). The task has
been to comb through the data, and extract observations (rows) if they match
certain characteristics. Specifically, each file is iterated over and if a field
within a line matches a given value then the line should be extracted and
appended to the final output. This task is relatively straightforward in Python,
but to iterate over all of the files takes around 45 minutes. While this isn&#8217;t
an exorbiant amount of time, fast is always better. This problem is also
embarassingly parallel; the different files do not need to communicate their
results to each other, the results simply need to be stacked into a final array
in order to be saved to a file. Thus began my saga to implement a parallel
version of a script I wrote to iterate over the files and select the lines.</p>

<h3>The Code</h3>

<div><script src='https://gist.github.com/4237347.js?file='></script>
<noscript><pre><code>import numpy as np
from joblib import Parallel, delayed

def subset(file):
    dataOut = []
    data = open(file, 'r')
    data.readline()
    for line in data:
        splitLine = line.split('\t')
        if splitLine[3] == '57':
            dataOut.append(splitLine)
    return dataOut

def stack(list_of_data, hold_data):
    for i in xrange(len(list_of_data)):
        current = np.array(data[i])
        hold = np.vstack((hold_data, current))
    return hold

if __name__ == &quot;__main__&quot;:
    filepath = ['testData1.txt', 'testData2.txt']

    hold  = []
    temp = open(filepath[0], 'r')
    hold.append(temp.readline().split('\t'))
    data = Parallel(n_jobs=-1)(delayed(subset)(x) for x in filepath)
    finalData = stack(data, hold)
</code></pre></noscript></div>


<p>As with my other posts I&#8217;ll walk through the code line by line.</p>

<ul>
<li><p>1-2 Just imports. I&#8217;ll be using the <code>Parallel</code> and
<code>delayed</code> functions from the joblib module.</p></li>
<li><p>4-13 Defining the function to subset out the data. The code is fairly easy to
understand here. The file is opened, the first line is read since this
contains the column names and should not be appended to the result. Then each
line is iterated over, split on the basis of the tabs, and appended if it
meets a certain criteria.</p></li>
<li><p>15-19 Function to stack the data. The joblib <code>Parallel</code> function will return a
list of lists, with each list within the list being the results from the
individual files. The <code>stack</code> function iterates over the list, converts the
inner lists to numpy arrays, and stacks the current data with the previous
data.</p></li>
<li><p>22-28 Running the script. The main focus here is on line 27. The first
argument that <code>Parallel</code> takes is the number of jobs to be used. Setting
<code>n_jobs</code> to -1 says to use all possible cores. The second argument is the
function to be run in parallel. The joblib docs indicate that &#8220;The delayed
function is a simple trick to be able to create a tuple
(function, args, kwargs) with a function-call syntax.&#8221; So delayed is passed
the <code>subset</code> function with the arg <code>x</code>, which represents the file to be opened
as held in <code>filepath</code>. This data is then stored as a list of lists, and
stacked using the <code>stack</code> function.</p></li>
</ul>


<p>Some quick prelimenary examinations shows that this parallel implementation is
much, much faster than running in serial. Running on two files is almost
instananeous, which is a drastic improvement.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[R Magic and Bootstrapped t-test]]></title>
    <link href="http://johnb30.github.com/blog/2012/11/29/r-magic-and-bootstrapped-t-test/"/>
    <updated>2012-11-29T21:53:00-05:00</updated>
    <id>http://johnb30.github.com/blog/2012/11/29/r-magic-and-bootstrapped-t-test</id>
    <content type="html"><![CDATA[<p>Following up on my last post, I wanted a way to test my bootstrapped t-test
function against the regular t-test function in R. While I was able to do this
by copy-pasting between R and a Python shell, this was less than ideal. I then
saw, however, a <a href="http://nbviewer.ipython.org/4166681/">post</a> by Christopher
Fonnesbeck that discussed the use of the rmagic function in ipython, which can
be loaded using the %load_ext magic function. So, with this in mind, I decided
to test it out using a comparison between my bootstrap function and the
<code>t.test</code> function in R. As a note, the rmagic extension requires
<a href="http://rpy.sourceforge.net/rpy2.html">rpy2</a>, so just <code>pip install rpy2</code> and
you should be good to go.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import bootFunction
</span><span class='line'>
</span><span class='line'>%load_ext rmagic
</span><span class='line'>%R treatment = c(24,25,28,28,28,29,29,31,31,35,35,35)
</span><span class='line'>%R control = c(21,22,24,27,27,28,29,32,32)
</span><span class='line'>%Rpull treatment control
</span><span class='line'>
</span><span class='line'>bootFunction.bootstrap_t_test(treatment, control, direction = "greater")
</span><span class='line'>
</span><span class='line'>%R print(t.test(treatment, control, alternative = "greater"))</span></code></pre></td></tr></table></div></figure>


<p>I first import the set of functions from the bootFunction. I then load the
rmagic extension using the <code>%load_ext</code> magic function. Using the <code>%R</code> magic
function I then defined two vectors of data, treatment and control, in the R
space. I then used <code>%Rpull</code> to pull the two vectors from the R space into the
Python shell. The two variables become structured numpy arrays.
I then perform the bootstrapped t-test as described in the earlier post.
Finally, using the <code>%R</code> magic function again, I print out the results of the
<code>t.test</code> function in R using the same data. The p-values aren&#8217;t exactly the
same, as is to be expected, but are at least within the same ballpark (the R
t-test gives .05, while the boostrap function has returned a range between .05
and .03).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bootstrapped t-test]]></title>
    <link href="http://johnb30.github.com/blog/2012/11/28/bootstrapping-t-test/"/>
    <updated>2012-11-28T19:47:00-05:00</updated>
    <id>http://johnb30.github.com/blog/2012/11/28/bootstrapping-t-test</id>
    <content type="html"><![CDATA[<p>The below code is to perform a nonparametric two-sample t-test using
bootstrapping. First I present the code, and will then follow up with a
line-by-line description of what&#8217;s going on.</p>

<div><script src='https://gist.github.com/4166016.js?file='></script>
<noscript><pre><code>from __future__ import division
import numpy as np
import pandas as pd
import random

def sample(data):
    sample = [random.choice(data) for _ in xrange(len(data))]
    return sample

def bootstrap_t_test(treatment, control, nboot = 1000, direction = &quot;less&quot;):
    ones = np.vstack((np.ones(len(treatment)),treatment))
    treatment = ones.conj().transpose()
    zeros = np.vstack((np.zeros(len(control)), control))
    control = zeros.conj().transpose()
    Z = np.vstack((treatment, control))
    tstat = np.mean(treatment[:,1])-np.mean(control[:,1])
    tboot = np.zeros(nboot)
    for i in xrange(nboot):
        sboot = sample(Z)
        sboot = pd.DataFrame(np.array(sboot), columns=['treat', 'vals'])
        tboot[i] = np.mean(sboot['vals'][sboot['treat'] == 1]) - np.mean(sboot['vals'][sboot['treat'] == 0]) - tstat
    if direction == &quot;greater&quot;:
        pvalue = np.sum(tboot&gt;=tstat-0)/nboot
    elif direction == &quot;less&quot;:
        pvalue = np.sum(tboot&lt;=tstat-0)/nboot
    else:
        print 'Enter a valid arg for direction'

    print 'The p-value is %f' % (pvalue)
</code></pre></noscript></div>


<ul>
<li><p>1-4: Just some imports. We need the floating point division from the
future module, numpy, pandas, and the random module.</p></li>
<li><p>6-8: Defining a function <code>sample</code> that samples with replacement from the
dataset, creating a new dataset of the same length as the original data.
This makes use of the <code>random.choice</code> function, which samples one item
randomly from the data. This function is called the same number of times as
there are observations in the data.</p></li>
<li><p>10-17: Defining a function to perform the t-test, with two data inputs,
the number of repititions to be performed, and the direction of the
alternative hypothesis. First a 2 x <em>n</em> matrix is defined, with row 1 being
all ones and row 2 being the data. This is then flipped to create an <em>n</em> x 2
matrix. The same procedure is then repeated for the control data, except with
0s instead of 1s. These two matrices are then stacked on top of each other.
<code>tstat</code> is the difference between the two groups, and tboot is a vector of
zeros with length equal to the number of repititions for the bootstrap.</p></li>
<li><p>18-21: This for-loop actually performs the bootstrap for the number of times
indicated by <code>nboot</code>. First, a sample of the data (<code>Z</code>) is taken using the
<code>sample</code> function defined above. This is then transformed into a pandas
DataFrame, and given appropriate column names. Finally, the difference in
means of the two groups is taken for each iteration of the loop and stored in
the appropriate location in <code>tboot</code>.</p></li>
<li><p>22-28: This is simply calculating a proportion of samples that were greater or
less than the test statistic, based on the direction of the alternative
hypothesis. The final line (29) then prints the p-value as a float.</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Starting With Python]]></title>
    <link href="http://johnb30.github.com/blog/2012/11/24/starting-with-python/"/>
    <updated>2012-11-24T19:10:00-05:00</updated>
    <id>http://johnb30.github.com/blog/2012/11/24/starting-with-python</id>
    <content type="html"><![CDATA[<h2>Overview</h2>

<h3>What is this?</h3>

<p>In short, setting up Python (and other things) for scientific computing and
research can be entirely more complicated than necessary. With that said, this
aims to be a short how-to guide pointing to some resources that can make life
much easier. This post is geared towards Political Scientists coming from either
1) using R as a programming language or 2) having no programming and minimal
computing experience. Most of the things listed here have been attempted by me,
but I make no guarantees that anything will work properly or won&#8217;t mess
something up when attempted. As with anything proceed with caution and at your
own risk.</p>

<p>This how-to is mainly geared towards OS X, but many of the suggestions should
also work on Linux (and are probably easier). I don&#8217;t have any experience
setting up Windows and would probably suggest looking into dual booting Linux
(see <a href="http://www.ubuntu.com/">here</a> for more). Downloading Ubuntu to a CD and
setting up a dual boot is extremely easy.</p>

<p>I&#8217;ll be adding to this as I have time and think of different things that have
helped me. I know this post is long, but there is a large amount of information
to share, and I think it is easier to get a lot of it in one place, rather than
spread out.</p>

<h3>Basics</h3>

<p>I&#8217;m going to start from the assumption that if you&#8217;re reading this you&#8217;ve never
dealt with a command-line interface, or if you have that you&#8217;ve only been
briefly exposed (maybe through things like R or Stata). So, before working with
these sorts of things it&#8217;s helpful to get acquainted with the Terminal
(Command Prompt in Windows). You should be able to find this in your
Applications folder in the Utilities folder. Go ahead and drag the app to your
dock. It will make life easier for you to have it here.</p>

<p>If you open it up you will see something like</p>

<pre><code>John-B-MacBook-Pro:~ john$ 
</code></pre>

<p>The word (john here) right before the $ is your username. There are some basic
commands for working with the Terminal:</p>

<ul>
<li><code>ls</code> shows you all of the files and folders in your current working directory</li>
<li><code>ls -a</code> shows all files and folders including those that are hidden</li>
<li><code>cd</code> allows you to move from one location to another</li>
<li><code>mv</code> lets you move files</li>
<li><code>cp</code> is copying</li>
</ul>


<p>and many, many more. A basic workflow is as below:</p>

<pre><code>$ ls
Applications    Desktop     Documents

$ cd Documents
$ ls -a
test.txt    .hidden.txt

$ mv test.txt /Users/johnbeieler/Desktop
</code></pre>

<p>When in doubt Google what you want to do followed by &#8220;Terminal.&#8221; So, something
like &#8220;remove file terminal&#8221; or &#8220;copy file terminal.&#8221; A word of warning, you&#8217;re
&#8220;closer to the metal&#8221; when using a command-line interface. This means that you
have a lot of power and flexibility when working with things, but it also means
you have the ability to completely wipe your hard drive if you type the wrong
command. Be careful.</p>

<p>You should probably go ahead and install XCode. This is included on the install
CD that came with your Mac, or it can be downloaded from the Mac App Store.
Make sure that you&#8217;re using the correct version for your version of OS X.
This will install some things that will be necessary to work with later.
Linux has an awesome concept called package managers, which allow you to easily
install different applications and, well, packages by typing something like
&#8220;sudo apt-get package&#8221; into the Terminal and things are automagically downloaded
and installed. Macs lack this functionality. But! Some enterprising individuals
have come up with a way to help. By heading to
<a href="http://mxcl.github.com/homebrew/">http://mxcl.github.com/homebrew/</a> you can
download a package manager that makes
life much easier. Feel free to look around for utilities that can be installed
using homebrew that might be of use to you. As a word of advice, if you are on
the verge of installing something, first check and see if it is available using
homebrew since brew keeps things nice and organized in your usr/local folder
instead of spread all over your computer.</p>

<h2>Python</h2>

<p>OS X comes with Python preloaded and is required by the operating system for
many functions. This is good and bad. Good since you can type</p>

<pre><code>$ python 
</code></pre>

<p>and get up and running in an interactive session. It&#8217;s also bad because the
structure of the Python installation on OS X can create some difficulties with
certain libraries. This leaves two options:
First, you can go with the default Python implementation.
This will necessitate (sort of) the use of the Scipy Superpack
<a href="http://fonnesbeck.github.com/ScipySuperpack/">http://fonnesbeck.github.com/ScipySuperpack/</a>.
The Superpack installs nearly every awesome Python library that your scientific
researcher heart could desire. As a brief rundown of what each package does:</p>

<h4>Numpy and Scipy</h4>

<p>The heart of numerical computing in Python. These two libraries give array and
matrix functions along with many other cool things. Numpy is short for Numeric
Python and Scipy is short for Scientific Python. Many other libraries in Python
are dependent on these. Much (digital) ink has been spilled on using these two
so feel free to search around for more on how an array is different than a
matrix in Numpy (hint: You should probably use an array).</p>

<h4>Matplotlib</h4>

<p>Plotting functions in Python. Allows you to make pretty graphs.</p>

<h4>IPython</h4>

<p>Stands for Interactive Python. When running python from the Terminal you should
type <code>ipython</code> instead of <code>python</code>.  IPython gives many different
magic functions and has all kinds of need goodies in it that generally make life
easier.</p>

<h4>Pandas</h4>

<p>The best thing since sliced bread and pockets on jeans. Allows the R dataframe
functionality in Python. Supports complex indexing for panel data, creation of
various statistics such as moving averages, includes various read and write
functionalities. It has some awesome documentation so go check it out.</p>

<h4>Statsmodels</h4>

<p>Statistical models in Python. This one is pretty self explanatory but is
tremendously useful and is more intuitive than R in many ways.</p>

<h4>Scikit-learn</h4>

<p>Machine learning in Python. Has some of the most comprehensive documentation
around, including a series of tutorials on how to get started with machine
learning in general.</p>

<h4>PyMC</h4>

<p>Bayesian inference in Python. MCMC and more.</p>

<h4>Other Utilities</h4>

<p>nose, readline and DateUtils. Things that are useful for other packages.
You can read up on these more if you would like. Of importance, however, is
nose. Nose is a testing suite for Python that allows you to see if anything is
wonky in your installation. You can (maybe) get away with skipping these, but
it never hurts. Look up the different tests for each of the utilities if you
want to run them.</p>

<p>In all honesty it is probably easiest to use the Superpack. The other option is
to download another Python distrubution that has all of these things included
plus a &#8220;vanilla&#8221; (non-Apple) build of Python. Some examples of these are:</p>

<ul>
<li>Enthought Python <a href="https://enthought.com/products/edudownload.php">https://enthought.com/products/edudownload.php</a></li>
<li>Python(x,y) <a href="https://code.google.com/p/pythonxy/">https://code.google.com/p/pythonxy/</a></li>
</ul>


<p>But really, just use the Superpack.</p>

<h2>Other things</h2>

<p>There are some other things that are useful (read: necessary) to use Python in
any meaningful way. One of the most important is setuptools.</p>

<p>To install setuptools:</p>

<p>1) Go to <a href="http://pypi.python.org/pypi/setuptools">http://pypi.python.org/pypi/setuptools</a>.
Download the .egg file located towards the bottom of the page. Since your
version is 2.7 you would download (as of 08/29/2012) setuptools-0.6c11-py2.7.egg.</p>

<p>2) Place it on your desktop. Do NOT change the name.</p>

<p>3) Cd to your desktop in the Terminal:</p>

<pre><code>$ cd Desktop
$ sh setuptools-0.6c11-py2.7.egg 
</code></pre>

<p>4) That should be it.</p>

<p>What setuptools allows you to do is type <code>easy_install package</code> and it will
install that package for your use in Python. Some people suggest that a program
called pip is better because it has additional features such as the ability to
easily uninstall programs. To install pip you just type:</p>

<pre><code>$ easy_install pip 
</code></pre>

<p>That&#8217;s right. Pip is installed using easy_install.</p>

<p>Let&#8217;s try it out for a library called Scrapy. Scrapy is described as</p>

<blockquote><p>Scrapy is a fast high-level screen scraping and web crawling framework, used to
crawl websites and extract structured data from their pages. It can be used for
a wide range of purposes, from data mining to monitoring and automated testing.</p></blockquote>

<p>Sounds pretty cool. All you do is open up Terminal and type:</p>

<pre><code>$ easy_install Scrapy 
</code></pre>

<p>Alternatively if you&#8217;re using pip:</p>

<pre><code>$ pip install Scrapy 
</code></pre>

<h2>Miscellany</h2>

<p>There are some other things that are useful to have when doing this kind of
programming/coding/scripting type work that aren&#8217;t related directly to working
with Python.</p>

<h4>Version Control</h4>

<p>First is git and github. Git is what&#8217;s called a &#8220;version control system.&#8221; Have
you ever been working on a paper and saved your work only to realize that you
wrote over some changes that you didn&#8217;t mean to? Me too. Git keeps a detailed
list of the versions of a file, including any changes or additions made to a
specific version, and allows you to roll back to a previous version. So, if you
wrote over a file and want to revert back you just have to find the version you
want.</p>

<p>Github is a &#8220;social coding platform.&#8221; It&#8217;s basically git on the internet. You&#8217;re
reading this on github right now. Normally git and github involve some (semi)
complicated Terminal commands. Github has, however, provided a nice, functional
program to use git and github. The Mac version is here <a href="http://mac.github.com/">http://mac.github.com/</a>.</p>

<h4>Text Editors</h4>

<p>Text editors can cause a surprising amount of consternation on the internet. A
decent editor can make your life easier with features such as syntax
highlighting, autoindentation, tab completion, and other features. I won&#8217;t say
which editor to use, but will give you a list of some of the big ones.
(This was written using vim, MacVim to be specific).</p>

<p><strong>Gedit:</strong> Standard on Linux distros. Simple. Includes some syntax highlighting.</p>

<p><strong>Emacs:</strong> One of the big two editors. Built on LISP. Can basically be whatever
you want it to be. Uses extensive, and sometimes complicated, key combinations
to get things done.</p>

<p><strong>Vim:</strong> The second of the big two. Has different modes such as insert and
normal. Takes some getting used to. Has a ton of different add-ons.</p>

<p><strong>Sublime Text 2:</strong> Probably more straightforward than Emacs or Vim, but more
powerful than gedit. More modern than either Emacs or Vim. Free to try for a
bit.</p>

<h4>Other</h4>

<p>I&#8217;ll add a shameless plug here for some code that I wrote, py_apsrtable. This
is designed to provide easy functions to take output from Python statistical
packages and turn it into pretty LaTeX tables. To install</p>

<pre><code>$ pip install py_apsrtable
</code></pre>

<p>Documentation is on <a href="http://johnb30.github.com/py_apsrtable">github</a>.</p>

<p>I will also add as a final point that it is probably nice to take a look at
&#8220;The Zen of Python&#8221; by opening up a python shell, <code>ipython</code>, and typing</p>

<pre><code>import this
</code></pre>

<p>Next, take a look at the Python style guide contained in <a href="http://www.python.org/dev/peps/pep-0008/#code-lay-out">PEP8</a>
(PythonEnhancement Proposal 8). Following these guidelines will allow your code
to be consistent with the prevailing style for Python code.</p>

<p>I know this was slightly rambling, and there are <em>numerous</em> points that I have
missed, but I hope this provides some information that will be useful to those
trying to get setup with Python for research. If you have any questions or
suggestions, please feel free to contact me.</p>
]]></content>
  </entry>
  
</feed>
