<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ipython | John Beieler]]></title>
  <link href="http://johnb30.github.com/blog/categories/ipython/atom.xml" rel="self"/>
  <link href="http://johnb30.github.com/"/>
  <updated>2013-07-06T17:00:14-05:00</updated>
  <id>http://johnb30.github.com/</id>
  <author>
    <name><![CDATA[John Beieler]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[R Magic and Bootstrapped t-test]]></title>
    <link href="http://johnb30.github.com/blog/2012/11/29/r-magic-and-bootstrapped-t-test/"/>
    <updated>2012-11-29T21:53:00-06:00</updated>
    <id>http://johnb30.github.com/blog/2012/11/29/r-magic-and-bootstrapped-t-test</id>
    <content type="html"><![CDATA[<p>Following up on my last post, I wanted a way to test my bootstrapped t-test
function against the regular t-test function in R. While I was able to do this
by copy-pasting between R and a Python shell, this was less than ideal. I then
saw, however, a <a href="http://nbviewer.ipython.org/4166681/">post</a> by Christopher
Fonnesbeck that discussed the use of the rmagic function in ipython, which can
be loaded using the %load_ext magic function. So, with this in mind, I decided
to test it out using a comparison between my bootstrap function and the
<code>t.test</code> function in R. As a note, the rmagic extension requires
<a href="http://rpy.sourceforge.net/rpy2.html">rpy2</a>, so just <code>pip install rpy2</code> and
you should be good to go.</p>

<p>```
import bootFunction</p>

<p>%load_ext rmagic
%R treatment = c(24,25,28,28,28,29,29,31,31,35,35,35)
%R control = c(21,22,24,27,27,28,29,32,32)
%Rpull treatment control</p>

<p>bootFunction.bootstrap_t_test(treatment, control, direction = "greater")</p>

<p>%R print(t.test(treatment, control, alternative = "greater"))
```</p>

<p>I first import the set of functions from the bootFunction. I then load the
rmagic extension using the <code>%load_ext</code> magic function. Using the <code>%R</code> magic
function I then defined two vectors of data, treatment and control, in the R
space. I then used <code>%Rpull</code> to pull the two vectors from the R space into the
Python shell. The two variables become structured numpy arrays.
I then perform the bootstrapped t-test as described in the earlier post.
Finally, using the <code>%R</code> magic function again, I print out the results of the
<code>t.test</code> function in R using the same data. The p-values aren't exactly the
same, as is to be expected, but are at least within the same ballpark (the R
t-test gives .05, while the boostrap function has returned a range between .05
and .03).</p>
]]></content>
  </entry>
  
</feed>
