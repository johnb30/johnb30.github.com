<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Statistics | John Beieler]]></title>
  <link href="http://johnb30.github.com/blog/categories/statistics/atom.xml" rel="self"/>
  <link href="http://johnb30.github.com/"/>
  <updated>2012-11-28T20:03:15-05:00</updated>
  <id>http://johnb30.github.com/</id>
  <author>
    <name><![CDATA[John Beieler]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Bootstrapping t-test]]></title>
    <link href="http://johnb30.github.com/blog/2012/11/28/bootstrapping-t-test/"/>
    <updated>2012-11-28T19:47:00-05:00</updated>
    <id>http://johnb30.github.com/blog/2012/11/28/bootstrapping-t-test</id>
    <content type="html"><![CDATA[<p>The below code is to perform a nonparametric two-sample t-test using
bootstrapping. First I present the code, and will then follow up with a
line-by-line description of whats going on.</p>

<p><div><script src='https://gist.github.com/996818.js?file='></script>
<noscript><pre><code>@@ -590,7 +590,7 @@ class SpritesTest &lt; Test::Unit::TestCase
  it &quot;should generate a sprite from nested folders&quot; do
    css = render &lt;&lt;-SCSS
-     @import &quot;nested/*.png&quot;;
+     @import &quot;nested/**/*.png&quot;;
      @include all-nested-sprites;
    SCSS
    assert_correct css, &lt;&lt;-CSS</code></pre></noscript></div>
</p>

<ul>
<li><p>1-4: Just some imports. We need the floating point division from the
<strong>future</strong> module, numpy, pandas, and the random module.</p></li>
<li><p>6-8: Defining a function <code>sample</code> that samples with replacement from the
dataset, creating a new dataset of the same length as the original data.
This makes use of the <code>random.choice</code> function, which samples one item
randomly from the data. This function is called the same number of times as
there are observations in the data.</p></li>
<li><p>10-17: Defining a function with to perform the t-test, with two data inputs,
the number of repititions to be performed, and the direction of the
alternative hypothesis. First a 2x<strong>n</strong> matrix is defined, with row 1 being
all ones and row 2 being the data. This is then flipped to create a <strong>n</strong>x2
matrix. The same procedure is then repeated for the control data, except with
0s instead of 1s. These two matrices are then stacked on top of each other.
<code>tstat</code> is the difference between the two groups, and tboot is a vector of
zeros with length of the number of repititions for the bootstrap.</p></li>
<li><p>18-21: This for-loop actually performs the bootstrap for the number of times
indicated by <code>nboot</code>. First, a sample of the data (<code>Z</code>) is taken using the
<code>sample</code> function defined above. This is then transformed into a pandas
DataFrame, and given appropriate column names. Finally, the difference in
means of the two groups is taken for each iteration of the loop and stored in
the appropriate location in <code>tboot</code>.</p></li>
<li><p>22-28: This is simply calculating a proportion of samples that were greater or
less than the test statistic, based on the direction of the alternative
hypothesis. The final line (29) then prints the p-value as a float.</p></li>
</ul>

]]></content>
  </entry>
  
</feed>
